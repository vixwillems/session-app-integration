blueprint:
  name: Matrix Clock Stopwatch Controller
  description: Controls stopwatch display on Ulanzi Matrix Clock using toggles and break/session states.
  domain: automation
  input:
    ulanzi_device:
      name: Ulanzi Device
      description: The Ulanzi Matrix Clock device (MQTT-based)
      selector:
        device:
          integration: mqtt
    session_toggle:
      name: Session Start Toggle
      selector:
        entity:
          domain: input_boolean
    pause_toggle:
      name: Pause Toggle
      selector:
        entity:
          domain: input_boolean
    unpause_toggle:
      name: Unpause Toggle
      selector:
        entity:
          domain: input_boolean
    end_toggle:
      name: End Session Toggle
      selector:
        entity:
          domain: input_boolean
    break_toggle:
      name: Break Start Toggle
      selector:
        entity:
          domain: input_boolean
    break_end_toggle:
      name: Break End Toggle
      selector:
        entity:
          domain: input_boolean
    stop_app_toggle:
      name: Stop App Toggle
      selector:
        entity:
          domain: input_boolean
    session_color:
      name: Session Color (RGB)
      selector:
        color_rgb:
    break_color:
      name: Break Color (RGB)
      selector:
        color_rgb:
    session_start_time:
      name: Session Start Time (input_datetime)
      description: A helper to store when the session or break started
      selector:
        entity:
          domain: input_datetime
mode: single
variables:
  ulanzi_topic: "{{ states((device_entities(ulanzi_device) | select('search', 'device_topic') | list)[0]) }}/custom/stopwatch"
  now_ts: "{{ as_timestamp(now()) }}"
action:
  - choose:
      - conditions:
          - condition: state
            entity_id: !input session_toggle
            state: "on"
        sequence:
          - service: input_datetime.set_datetime
            data:
              timestamp: "{{ now_ts }}"
            target:
              entity_id: !input session_start_time
          - service: mqtt.publish
            data:
              topic: "{{ ulanzi_topic }}"
              payload: >
                {{ dict(text="00:00", color=session_color) | to_json }}
      - conditions:
          - condition: state
            entity_id: !input break_toggle
            state: "on"
        sequence:
          - service: input_datetime.set_datetime
            data:
              timestamp: "{{ now_ts }}"
            target:
              entity_id: !input session_start_time
          - service: mqtt.publish
            data:
              topic: "{{ ulanzi_topic }}"
              payload: >
                {{ dict(text="00:00", color=break_color, blink=True) | to_json }}
      - conditions:
          - condition: state
            entity_id: !input stop_app_toggle
            state: "on"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ ulanzi_topic }}"
              payload: "{\"text\":\"\",\"color\":[0,0,0]}"
          - delay: 1
          - service: input_boolean.turn_off
            target:
              entity_id: !input stop_app_toggle
