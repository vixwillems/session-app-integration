blueprint:
  name: Matrix Clock Stopwatch Controller
  description: >
    Displays a stopwatch in HH:MM format on a Ulanzi Matrix Clock when a session is started
    and stops it when the session is ended.
  domain: automation
  input:
    session_helper:
      name: Session Toggle
      description: Input boolean for starting a session
      selector:
        entity:
          domain: input_boolean

    break_helper:
      name: Break Toggle
      description: Input boolean for starting a break
      selector:
        entity:
          domain: input_boolean

    matrix_clock:
      name: Matrix Clock
      description: The Ulanzi Matrix Clock display
      selector:
        entity:
          domain: text

    stopwatch_started:
      name: Stopwatch Start Time
      description: input_datetime entity to track the start of the session
      selector:
        entity:
          domain: input_datetime

mode: restart

trigger:
  - platform: state
    entity_id: !input session_helper
    to: 'on'
  - platform: state
    entity_id: !input break_helper
    to: 'on'
  - platform: state
    entity_id: !input session_helper
    to: 'off'
  - platform: state
    entity_id: !input break_helper
    to: 'off'

variables:
  session_helper: !input session_helper
  break_helper: !input break_helper
  matrix_clock: !input matrix_clock
  stopwatch_started: !input stopwatch_started

condition: []

action:
  - choose:
      - conditions:
          - condition: state
            entity_id: !input session_helper
            state: 'on'
        sequence:
          - service: input_datetime.set_datetime
            target:
              entity_id: !input stopwatch_started
            data:
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          - repeat:
              while:
                - condition: state
                  entity_id: !input session_helper
                  state: 'on'
              sequence:
                - variables:
                    elapsed: >
                      {{ (now().timestamp() - as_timestamp(states(stopwatch_started))) | int }}
                    hours: "{{ (elapsed // 3600) | int }}"
                    minutes: "{{ ((elapsed % 3600) // 60) | int }}"
                    time_string: >
                      {{ '%02d:%02d' | format(hours, minutes) }}
                - service: text.set_value
                  target:
                    entity_id: !input matrix_clock
                  data:
                    value: "‚è±Ô∏è {{ time_string }}"
                - delay:
                    seconds: 10

      - conditions:
          - condition: state
            entity_id: !input break_helper
            state: 'on'
        sequence:
          - service: text.set_value
            target:
              entity_id: !input matrix_clock
            data:
              value: "üí§ Break"

    default:
      - service: text.set_value
        target:
          entity_id: !input matrix_clock
        data:
          value: ""
